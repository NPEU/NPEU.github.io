/*
    Base Layout
    ===========

    This file establishes classes and variables for use in all other specific layouts, and helps to
    clarify how layout should be used.

    Rules
    ----

    * Layout is independent of decoration.
    * Layouts consist of two wrappers and one or more layout boxes.
    * The specific layout determines how these boxes should behave and arrange themselves.

*/
$layout-namespace: l- !default;
$layout-spacing-unit: 2rem !default;
$layout-spacing-unit--s: ($layout-spacing-unit / 2) !default;
$layout-spacing-unit--l: ($layout-spacing-unit * 2) !default;


$layout-bases: (
    15,
    20,
    25,
    30,
    35
) !default;

.#{$layout-namespace}box,
.#{$layout-namespace}layout,
.#{$layout-namespace}layout__inner {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
    list-style-type: none;
}

.#{$layout-namespace}layout {
}


/*
    1. This allows for --expand to work.
*/
.#{$layout-namespace}layout__inner {
    display: flex;
    flex-direction: column;
    height: 100%; /* 1 */
    
    --g: 0;
}

/*
    1. Ensure boxes fill their containers in cases where inline elements are used (I THINK)
      (I'm not not 100% sure of why this is here.)
*/
.#{$layout-namespace}box {
    display: block;
    flex-grow: 0;
    flex-shrink: 1;
    flex-basis: auto;
    //min-width: 100%; /* 1 */
}

.#{$layout-namespace}box--expand {
    flex-grow: 1;
}


// Switch to row:
.#{$layout-namespace}row .#{$layout-namespace}layout__inner {
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: space-around;
    align-items: stretch;

    .#{$layout-namespace}box {
        min-width: auto;
        flex-grow: 1;
    }
}

.#{$layout-namespace}row.#{$layout-namespace}row--start .#{$layout-namespace}layout__inner {
    justify-content: flex-start;

    .#{$layout-namespace}box {
        flex-grow: 0;
    }
}

.#{$layout-namespace}row.#{$layout-namespace}row--end .#{$layout-namespace}layout__inner {
    justify-content: flex-end;

    .#{$layout-namespace}box {
        flex-grow: 0;
    }
}

.#{$layout-namespace}row.#{$layout-namespace}row--center .#{$layout-namespace}layout__inner {
    justify-content: center;

    .#{$layout-namespace}box {
        flex-grow: 0;
    }
}

.#{$layout-namespace}row.#{$layout-namespace}row--push-apart .#{$layout-namespace}layout__inner {
    justify-content: space-between;

    .#{$layout-namespace}box {
        flex-grow: 0;
    }
}

// Add gutters:
// Small /**/
.#{$layout-namespace}gutter--s > .#{$layout-namespace}layout__inner {
    padding: $layout-spacing-unit--s;
}

.#{$layout-namespace}gutter--s > .#{$layout-namespace}layout__inner > .#{$layout-namespace}box {
    padding: $layout-spacing-unit--s;

    .#{$layout-namespace}box__separator {
        padding-left: $layout-spacing-unit--s;
    }
}


// Medium (default) /**/
.#{$layout-namespace}gutter > .#{$layout-namespace}layout__inner,
.#{$layout-namespace}gutter--m > .#{$layout-namespace}layout__inner {
    padding: $layout-spacing-unit;
}

.#{$layout-namespace}gutter > .#{$layout-namespace}layout__inner > .#{$layout-namespace}box,
.#{$layout-namespace}gutter--m > .#{$layout-namespace}layout__inner > .#{$layout-namespace}box {
    padding: $layout-spacing-unit;

    .#{$layout-namespace}box__separator {
        padding-left: $layout-spacing-unit;
    }
}


// Large /**/
.#{$layout-namespace}gutter--l > .#{$layout-namespace}layout__inner {
    padding: $layout-spacing-unit--l;
}

.#{$layout-namespace}gutter--l > .#{$layout-namespace}layout__inner > .#{$layout-namespace}box {
    padding: $layout-spacing-unit--l;

    .#{$layout-namespace}box__separator {
        padding-left: $layout-spacing-unit--l;
    }
}


// Add option to flush the edge gutters:

.#{$layout-namespace}flush-edge-gutter {
    //overflow: hidden;
}

.#{$layout-namespace}flush-edge-gutter  .#{$layout-namespace}layout__inner {
    padding: 0;
}

// Small /**/
.#{$layout-namespace}gutter--s.#{$layout-namespace}flush-edge-gutter > .#{$layout-namespace}layout__inner {
    //margin: -$layout-spacing-unit--s * 2;
    margin: -$layout-spacing-unit--s;
}


// Medium (default) /**/
.#{$layout-namespace}gutter.#{$layout-namespace}flush-edge-gutter > .#{$layout-namespace}layout__inner,
.#{$layout-namespace}gutter--m.#{$layout-namespace}flush-edge-gutter > .#{$layout-namespace}layout__inner {
    //margin: -$layout-spacing-unit * 2;
    margin: -$layout-spacing-unit;
}


// Large /**/
.#{$layout-namespace}gutter--l.#{$layout-namespace}flush-edge-gutter > .#{$layout-namespace}layout__inner {
    //margin: -$layout-spacing-unit--l * 2;
    margin: -$layout-spacing-unit--l;
}


// Flexbox gap support: https://gist.github.com/OliverJAsh/7f29d0fa1d35216ec681d2949c3fe8b7#gistcomment-3978504
@supports (text-transform: full-size-kana) or (translate: 10px) or (content-visibility: auto) {

    // Small /**/
    .#{$layout-namespace}gutter--s > .#{$layout-namespace}layout__inner {
        --g: #{$layout-spacing-unit--s * 2};
    }

    // Medium (default) /**/
    .#{$layout-namespace}gutter > .#{$layout-namespace}layout__inner,
    .#{$layout-namespace}gutter--m > .#{$layout-namespace}layout__inner {
        --g: #{$layout-spacing-unit * 2};
    }

    // Large /**/
    .#{$layout-namespace}gutter--l > .#{$layout-namespace}layout__inner {
        --g: #{$layout-spacing-unit--l * 2};
    }



    .#{$layout-namespace}gutter--s > .#{$layout-namespace}layout__inner,
    .#{$layout-namespace}gutter > .#{$layout-namespace}layout__inner,
    .#{$layout-namespace}gutter--m > .#{$layout-namespace}layout__inner,
    .#{$layout-namespace}gutter--l > .#{$layout-namespace}layout__inner {
        gap: var(--g);
    }

    .#{$layout-namespace}gutter--s > .#{$layout-namespace}layout__inner > .#{$layout-namespace}box,
    .#{$layout-namespace}gutter > .#{$layout-namespace}layout__inner > .#{$layout-namespace}box,
    .#{$layout-namespace}gutter--m > .#{$layout-namespace}layout__inner > .#{$layout-namespace}box,
    .#{$layout-namespace}gutter--l > .#{$layout-namespace}layout__inner > .#{$layout-namespace}box {
        padding: 0;
        margin: 0;
    }


    // We're NOT flushing the gutter by default so add padding:
    // Small /**/
    .#{$layout-namespace}gutter--s > .#{$layout-namespace}layout__inner,
    .#{$layout-namespace}gutter > .#{$layout-namespace}layout__inner,
    .#{$layout-namespace}gutter--m > .#{$layout-namespace}layout__inner,
    .#{$layout-namespace}gutter--l > .#{$layout-namespace}layout__inner {
        padding: var(--g);
    }


    // Add option to flush the edge gutters (so remove the padding we just added):

    .#{$layout-namespace}flush-edge-gutter.#{$layout-namespace}flush-edge-gutter > .#{$layout-namespace}layout__inner {
        padding: 0;
        margin: 0;
    }
}

// Preserve space between items (used for text groups):
.#{$layout-namespace}preserve-space .#{$layout-namespace}box {
    &::after {
        content: "\00a0";
    }
}

// Item bases:
@each $basis in $layout-bases {
    .#{$layout-namespace}layout.#{$layout-namespace}basis-#{$basis} > .#{$layout-namespace}layout__inner > .#{$layout-namespace}box {
        flex-basis: #{$basis}rem;
        --b: #{$basis}rem;
    }
}





@media #{$s__ie10-11} {

    .#{$layout-namespace}layout__inner {
        max-width: 100%;
    }

    .#{$layout-namespace}gutter > .#{$layout-namespace}layout__inner,
    .#{$layout-namespace}gutter--m > .#{$layout-namespace}layout__inner {
        max-width: calc(100% + #{$layout-spacing-unit * 2});
    }

    .#{$layout-namespace}gutter--s > .#{$layout-namespace}layout__inner {
        max-width: calc(100% + #{$layout-spacing-unit--s * 2});
    }

    .#{$layout-namespace}gutter--l > .#{$layout-namespace}layout__inner{
        max-width: calc(100% + #{$layout-spacing-unit--l * 2});
    }


    .#{$layout-namespace}row .#{$layout-namespace}row > .#{$layout-namespace}layout__inner {
        display: block;
    }


    .#{$layout-namespace}row .#{$layout-namespace}row > .#{$layout-namespace}layout__inner::after {
        content: "";
        display: table;
        clear: both;
    }

    .#{$layout-namespace}row .#{$layout-namespace}row > .#{$layout-namespace}layout__inner > .#{$layout-namespace}box {
        float: left;
    }

    .#{$layout-namespace}box {
        max-width: 100%;
    }
}
