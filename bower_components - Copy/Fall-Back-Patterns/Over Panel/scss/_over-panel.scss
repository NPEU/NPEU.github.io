/*! --------------------------------------------------------------------------------------------- *\
    
    Fall-Back Over Panel v1.0.0
    https://github.com/Fall-Back/Patterns/tree/master/Over%20Panel
    Copyright (c) 2021, Andy Kirk
    Released under the MIT license https://git.io/vwTVl

    Designed for use with the basic [CSS Mustard Cut](https://github.com/Fall-Back/CSS-Mustard-Cut)
    IE 9+, FF 8+, Opera 12, Chrome 29+, Android ~4.4+
    Chrome 29+, Opera 16+, Safari 6.1+, iOS 7+, Android ~4.4+

\* ---------------------------------------------------------------------------------------------- */

$s__over-panel--breakpoint--enhanced:            $s__breakpoint--enhanced !default;
$s__over-panel__contents--z-index:               9999 !default;

// Colours:

$s__over-panel--base-ui-color:                   $s__base-ui-color !default;
$s__over-panel--base-text-color:                 $s__base-text-color !default;


$s__over-panel__contents--text-color:            #fff !default;
$s__over-panel__contents--background-color:      $s__over-panel--base-ui-color !default;

$s__over-panel__contents--link-color:            darken($s__over-panel__contents--text-color, 14%) !default;
$s__over-panel__contents--link-color--alt:       darken($s__over-panel__contents--text-color, 7%) !default;

$s__over-panel__control--color:                  #fff !default;
$s__over-panel__control--color--alt:             $s__over-panel__control--color !default;
$s__over-panel__control--background-color:       $s__over-panel--base-ui-color !default;
$s__over-panel__control--background-color--alt:  darken($s__over-panel__control--background-color, 14%) !default;
$s__over-panel__control--background-color--alt2: darken($s__over-panel__control--background-color, 7%) !default;

$s__over-panel__control--border-color:           rgba(255,255,255,0.2) !default;
$s__over-panel__control--border-style:           solid !default;
$s__over-panel__control--border-width:           1px !default;
$s__over-panel__control--border-radius:          0 !default;


$s__over-panel__contents--offset-top:            0 !default;


$s__over-panel__overlay--background-color:       #000 !default;



// Sizes:

$s__over-panel__control--height:                 ($s__base-em-ratio * 1.5em) !default;
$s__over-panel--spacing:                         ($s__over-panel__control--height / 8) !default;


$s__over-panel__contents--padding:                0 !default; //$s__base-rem-space-unit !default;


// Transitions:
$s__over-panel--transition-duration:             ease;
$s__over-panel--transition-timing-function:      0.8s;

$s__over-panel__overlay-transition:              opacity 0.5s ease !default;


// Other:
$s__over-panel__overlay-opacity:                 0.6 !default;
//$s__over-panel__overlay-shadow:                  0 0 10px 5px #000 !default;

/* -- Basic/fallback layout --------------------------------------------------------------------- */

    /*
        1. Helps compatibiliy with Nav-Bar. No down-sides I can see. May have to revise if some
           become apparent.
    */
    .over-panel {
        width: 100%; /* [1] */
    }

    
    /*
		This is a bit of a hack, but it's a way of letting JS know that this CSS has loaded.
		It doesn't work for Opera Mini, but I'm happy to provide this browser only with the
		unenhanced version.
        UPDATE: Due to problem with FOBP, now checking for existence of class in styesheet earlier
        on, so this isn't needed:
	*/
	/*.over-panel::before {
		content: 'CSS Loaded';
        display: none;
	}*/
    // Use this instead:
    .js-over-panel {
        // This could be any inconsequential declaration:
        border: 0;
    }

    .over-panel-control {
        display: none;
    }


    // Not 100% sure about this.
    // May consider removing this, or making the whole section optional if user doesn't want to use:
    .over-panel__contents {
        background-color: $s__over-panel__contents--background-color;
        color: $s__over-panel__contents--text-color;
        padding: $s__over-panel__contents--padding;     
    }
    
    /*
        iOS/OSX seem to apply mystery margins.
    */
    .over-panel,
    .over-panel__contents {
        margin: 0;
    }
    
    .over-panel__contents > * {
            -webkit-flex: 0 1 auto;
                -ms-flex: 0 1 auto;
                    flex: 0 1 auto;
        }

    .over-panel__contents a {
        color: $s__over-panel__contents--link-color;
    }

    .over-panel__contents a:hover,
    .over-panel__contents a:active,
    .over-panel__contents a:focus {
        color: $s__over-panel__contents--link-color--alt;
    }

/* -----------------------------------------------------------------------------------------------*/


/* ********************************************************************************************** */
/* -- Enhanced layout --------------------------------------------------------------------------- */
    .js-over-panel .over-panel {
        width: auto;
        -webkit-flex: 1 0 auto;
            -ms-flex: 1 0 auto;
                flex: 1 0 auto;
    }
    
    .js-over-panel .over-panel__contents {
        display: -webkit-flex;
        display: -ms-flexbox;
        display: flex;
    }
    
    
    @media only screen and (max-width: ($s__over-panel--breakpoint--enhanced - $s__mq-1-em-px)) {
		/*
			1. Make sure the over-panel is on top.
		*/
		.js-over-panel .over-panel {
			position: absolute; /* [1] */
            left: 0;
            //top: 0;
            width: 100%;
			////z-index: $s__over-panel--z-index; /* [1] */
		}


        .js-over-panel-control.over-panel-control {
            display: inline-block;
        }


        /*
            This extra wrapper allows the content of the panel to be absolutely positioned so that the
            container doesn't create a positioning context which would prevent the overlay from filling
            the body.
            The :target id needs to stay in actual position so the fall-back works, so everything
            affected by the :target must come after or inside the element with the id, but we want to
            allow the position of the controls to be as flexible as possible, so some trickery is
            needed.


            1. Make the over-panel invisible in a way that's transition-able but also removes from tab
               order.
        */
        .js-over-panel .over-panel__contents {

            position: absolute;
            z-index: $s__over-panel__contents--z-index;
            left: 0;
            //top: $s__over-panel__control--height;
            top: $s__over-panel__contents--offset-top;
            width: 100%;
            //overflow: auto; Not sure why I needed this.

            visibility: hidden; /* [1] */
            
            -webkit-flex-direction: column;
                -ms-flex-direction: column;
                    flex-direction: column;
  
            
        }


        /*
            1. Make the over-panel visible in a way that's transition-able.
        */
        .js-over-panel_is-open .over-panel__contents {
            visibility: visible; /* [1] */
        }


        // Variable aliases for ease of comprehension:
        $td: $s__over-panel--transition-duration;
        $tf: $s__over-panel--transition-timing-function;

        /* Slide effect: */

        /*.js-over-panel .over-panel--slide .over-panel__contents {
            -webkit-transform: translateY(-100%);
            -moz-transform:    translateY(-100%);
            -ms-transform:     translateY(-100%);
            -o-transform:      translateY(-100%);
            transform:         translateY(-100%);
        }

        .js-over-panel_is-animating.over-panel--slide .over-panel__contents {
            -webkit-transition: -webkit-transform $td  $tf,
                                visibility        0s   $tf  $td;
            -moz-transition:    -moz-transform    $td  $tf,
                                visibility        0s   $tf  $td;
            -o-transition:      -o-transform      $td  $tf,
                                visibility        0s   $tf  $td;
            transition:         transform         $td  $tf,
                                visibility        0s   $tf  $td;
        }

        .js-over-panel_is-open.over-panel--slide .over-panel__contents {
            -webkit-transform: translateY(0);
            -moz-transform:    translateY(0);
            -ms-transform:     translateY(0);
            -o-transform:      translateY(0);
            transform:         translateY(0);

            -webkit-transition: -webkit-transform $td  $tf;
            -moz-transition:    -moz-transform    $td  $tf;
            -o-transition:      -o-transform      $td  $tf;
            transition:         transform         $td  $tf;
        }*/


        /* Fade effect: */

        /*.js-over-panel .over-panel--fade .over-panel__contents {
            opacity: 0;
        }

        .js-over-panel_is-animating.over-panel--fade .over-panel__contents {
            -webkit-transition: opacity    $td  $tf,
                                visibility 0s   $tf  $td;
            -moz-transition:    opacity    $td  $tf,
                                visibility 0s   $tf  $td;
            -o-transition:      opacity    $td  $tf,
                                visibility 0s   $tf  $td;
            transition:         opacity    $td  $tf,
                                visibility 0s   $tf  $td;
        }

        .js-over-panel_is-open.over-panel--fade .over-panel__contents {
            opacity: 1;

            -webkit-transition: opacity $td  $tf;
            -moz-transition:    opacity $td  $tf;
            -o-transition:      opacity $td  $tf;
            transition:         opacity $td  $tf;
        }*/
        /*
            1. This necessary to collapse the element in cases where the page content without
               the over-panel contents is shorter than the over-panel contents themselves.
               Take, for example, where short-ish page that's part of a large site, which therefore 
               has a long menu. When the menu is revealed in the over-panel contents, the end result
               is higher than the page contents.
               Without these declarations, the page (with over-panel closed) renders with a
               scrollbar and what looks like mystery space at the bottom of the page (when in 
               reality that space is just what's needed to display the over-panel contents).
               This could be confusing for users (it was confusing for me!) and makes the page look
               broken.
               So, collapsing the contents while hidden prevents this space from appearing until
               needed.
        */
        .js-over-panel .over-panel .over-panel__contents {
            opacity: 0;
            transform: scale(0);  /* [1] */
        }

        .js-over-panel_is-animating.over-panel .over-panel__contents {
            -webkit-transition: opacity    $td  $tf,
                                visibility 0s   $tf  $td,
                                transform  0s   $tf  $td;
            -moz-transition:    opacity    $td  $tf,
                                visibility 0s   $tf  $td,
                                transform  0s   $tf  $td;
            -o-transition:      opacity    $td  $tf,
                                visibility 0s   $tf  $td,
                                transform  0s   $tf  $td;
            transition:         opacity    $td  $tf,
                                visibility 0s   $tf  $td,
                                transform  0s   $tf  $td;
        }

        .js-over-panel_is-open.over-panel .over-panel__contents {
            opacity: 1;
            transform: scale(1);  /* [1] */
            
            -webkit-transition: opacity $td  $tf;
            -moz-transition:    opacity $td  $tf;
            -o-transition:      opacity $td  $tf;
            transition:         opacity $td  $tf;
        }


        /*
            1. These override button styles defined as part of StartCSS. I may consider making these
               customisable via more variables.
			2. Ensure the control is above the overlay.
        */
        .js-over-panel-control.over-panel-control {
            display: block;
            margin: 0;

            padding-left: $s__over-panel--spacing * 2;
            padding-right: $s__over-panel--spacing * 2;
            padding-bottom: 0; /* 1 */
            padding-top: 0; /* 1 */

            border: 0;
            border-radius: $s__over-panel__control--border-radius;

            line-height: $s__over-panel__control--height;

            text-decoration: none;
            outline: 0;

            box-shadow: none; /* 1 */

            color: $s__over-panel__control--color;
            background-color: $s__over-panel__control--background-color;

            position: relative;
			z-index: 0;
        }



        // This is to turn off Start-CSS's hover border:
        .js-over-panel-control.over-panel-control:hover,
        .js-over-panel-control.over-panel-control:active,
        .js-over-panel-control.over-panel-control:focus {
            border: 0;
        }

        /*
            1. Ensure the control is above the overlay.
        */
        .js-over-panel-control.over-panel-control[aria-expanded="true"] {
            z-index: 1; /* [1] */
        }
        
        .js-over-panel-control.over-panel-control:hover,
        .js-over-panel-control.over-panel-control:active,
        .js-over-panel-control.over-panel-control[aria-expanded="true"] {
            color: $s__over-panel__control--color--alt;
            background-color: $s__over-panel__control--background-color--alt;
        }

        .js-over-panel-control.over-panel-control:focus {
            color: $s__over-panel__control--color--alt;
            background-color: $s__over-panel__control--background-color--alt2;
        }

		.js-over-panel-control.over-panel-control .icon--is-open,
        .js-over-panel-control.over-panel-control[aria-expanded="true"] .icon--is-closed {
            display: none;
        }

        .js-over-panel-control.over-panel-control .icon--is-closed,
        .js-over-panel-control.over-panel-control[aria-expanded="true"] .icon--is-open {
            display: inline;
        }


        /*.over-panel__open.over-panel__open {
            display: block;
        }*/

        /*
            Fix for Opera Mini vertical centering:
        */
        //_:-o-prefocus, body:last-child .over-panel__open,
        //_:-o-prefocus, body:last-child .over-panel__close {
        //    line-height: 2.8 !important;
        //}

        /* Hide the open control: */
        /*
            Taking this out for now is leaving it visible doesn't seem to hurt (though accessibility?)
            but hiding it can cause other elements to jump around due to flexbox.
            Maybe use visibility, not sure.
        */
        /*.js-over-panel_is-open .over-panel__open.over-panel__open {
            display: none;
        }*/



        /* Show the close control and move on above the overlay: */
        /*.js-over-panel_is-open .over-panel__close.over-panel__close {
            z-index: 1002; /* @var *
            display: block;
            position: absolute;
            top: 0;
            right: 0;
        }*/

        /*
            1. This is the obvious place for this rule but there's a weird Chrome bug that means
               the position/dimensions are ignore if it's initially hidden.
               Moving to the is-open declaration fixes this, as it only gets applied when it's
               visible.
            2. Using absolute instead so that it still collapses, preventing it unintentionally
               overlapping anything.
        */
        .js-over-panel .over-panel__overlay {
            display: block;
            //position: fixed; /* [1] */
            position: absolute; /* [2] */
            z-index: -1;
            left: 0;
            top: 0;
            width: 0;
            height: 0;
            padding: 0;
            margin: 0;
            border: 0;
            text-decoration: none;

            visibility: hidden;


            background: $s__over-panel__overlay--background-color;
            opacity: 0;

            -webkit-transition: $s__over-panel__overlay-transition;
               -moz-transition: $s__over-panel__overlay-transition;
                 -o-transition: $s__over-panel__overlay-transition;
                    transition: $s__over-panel__overlay-transition;

            //-webkit-box-shadow: $s__over-panel__overlay-shadow;
            //        box-shadow: $s__over-panel__overlay-shadow;
        }

        /* Bring the overlay to the front and fade in when there's an over-panel target: */
        .js-over-panel_is-open .over-panel__overlay {
			position: fixed;
            right: 0;
            bottom: 0;
            width: 100%;
            height: 100%;
            z-index: 0;
            opacity: $s__over-panel__overlay-opacity;

            visibility: visible;
        }

        .js-over-panel-control .over-panel__overlay:hover,
        .js-over-panel-control .over-panel__overlay:active,
        .js-over-panel-control .over-panel__overlay:focus {
            border: 0;
            text-decoration: none;
            background: $s__over-panel__overlay--background-color;
        }
    }

/* ---------------------------------------------------------------------------------------------- */
