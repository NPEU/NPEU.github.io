/*-------------------------------------------------------------------------------------------------|

    START-CSS FUNCTIONS
    ============================================================================================

|-------------------------------------------------------------------------------------------------*/
/*
    Colour contrast from https://gist.github.com/FStop/8959422

    Usage:
    @if s__color_contrast($colour, #fff) < 2 {
        color: #333;
    }
    @else{
        color: #fff;
    }
*/
/* Awesome contrast ratio function
* via https://gist.github.com/voxpelli/6304812
**/
/*-------------------------------------------------------------------------------------------------|

    START-CSS MIXINS
    ============================================================================================

|-------------------------------------------------------------------------------------------------*/
/*
    Apply a border and a padding that offsets the border-width from one spacing unit so as not to
    affect the vertical rhythm.
    Note the Opera Mini doesn't support `calc` so we need to include normal padding for that
    browser.
    Also, since we're supporting FF 8+, we're including -moz-calc for versions up to 16.
    I may consider removing this as those browsers are dead, but I'm just being thorough for now.

    Note on the 'last margin' issue/hack:
    The pseudo element is intended to provide a collapsible margin to cancel out any 'trailing'
    margins from content elements. However, since we're reducing the whole padding space by the
    border-width to maintain the vertical rhythm, that margin is also less, BUT the content margin
    is NOT being reduced, so that wins out - the reduction is ignored.
    If the pseudo element bottom margin is adjusted to cancel out the height (1px) AS WELL AS
    the amount of border-width, but the last element DOES NOT have a margin, then the space becomes
    too small.
    If pseudo-element height is 0, it doesn't work in IE, Chrome, Safari, without inline-block
*/
/*
    This button mixin isn't really meant for generating specific/themed _types_ of button - there
    would be too much code duplication for that.
    Instead, this is intended to create buttons for new/custom selectors.
    For example:

    ```
    [role="button"] {
        @include s__button;
    }
    ```

    rather than:

    ```
        .btn--affirmative {
            @include s__button(<text-color>, <bg-color>);
        }
    ```

    Note - because of this, think about removing parameters (it changed from my original intention -
    I may change it back or split this into 2 mixins, or even just move things that are meant for
    input[type="button"] to that ruleset - actually that's not a bad idea).

*/
/*
    1. Remove the tapping delay from clickable elements.

    Sort out the height of buttons. At 12px spacing, should be 30px high with 3px top/bottom margin.
    Note Edge doesn't like: `line-height: calc(3rem - 2px)` if `display: inline-flex`
    FF8 - ? doesn't like `line-height: -moz-calc()` and ignores
    Need to make sure height is governed by line-height in case of breaks within buttons.
*/
/*
    Uni-directional margins (bottom) is fine for most cases, but things like figcaptions that may
    contain paragraphs can result in double bottom margins, so flipping that around inside those
    containers.
*/
/*-------------------------------------------------------------------------------------------------|

    START-CSS TOKENS
    ============================================================================================

    Fall-Back is designed for use with the basic
    [CSS Mustard Cut](https://github.com/Fall-Back/CSS-Mustard-Cut)

    This determines a browser support base of:

    IE 9+, FF 8+, Opera 12, [Chrome 29+, Android ~4.4+]
    Chrome 29+, Opera 16+, Safari 6.1+, iOS 7+, Android ~4.4+


    Any double-classing (e.g. `.class.class`) is deliberate and intended to increase specifity.
    This allows any applicable Start-CSS declarations to be overidden.
    E.g. `.{pattern} .{pattern}__child` would `a[href]`, but just `.{pattern}` wouldn't, so we use
    `.{pattern}.{pattren}`

    https://coolors.co/50514f-f25f5c-ffe066-247ba0-70c1b3

|-------------------------------------------------------------------------------------------------*/
/*-------------------------------------------------------------------------------------------------|

    START-CSS SETTINGS
    ============================================================================================

    Fall-Back is designed for use with the basic
    [CSS Mustard Cut](https://github.com/Fall-Back/CSS-Mustard-Cut)

    This determines a browser support base of:

    IE 9+, FF 8+, Opera 12, [Chrome 29+, Android ~4.4+]
    Chrome 29+, Opera 16+, Safari 6.1+, iOS 7+, Android ~4.4+


    Any double-classing (e.g. `.class.class`) is deliberate and intended to increase specifity.
    This allows any applicable Start-CSS declarations to be overidden.
    E.g. `.{pattern} .{pattern}__child` would `a[href]`, but just `.{pattern}` wouldn't, so we use
    `.{pattern}.{pattren}`

    https://coolors.co/50514f-f25f5c-ffe066-247ba0-70c1b3

|-------------------------------------------------------------------------------------------------*/
/*
    HTML
*/
/*
    BODY
*/
/*
    ANCHOR
    
    1. This size allows 2px on normal fonts, 1px on smaller fonts.
*/
/* [1] */
/*
    ASIDE
*/
/*! Start-CSS Accessibility. See SCSS file for documentation. */
/*-------------------------------------------------------------------------------------------------|

    ACCESSIBILITY / ARIA
    ============================================================================================

|-------------------------------------------------------------------------------------------------*/
[aria-busy="true"] {
  cursor: progress;
}

/*
    Specify the pointer cursor of trigger elements. (S)
*/
[aria-controls] {
  cursor: pointer;
}

/*
    Specify the un-styled cursor of disabled, not-editable, or otherwise inoperable elements. (S)
*/
[disabled],
[aria-disabled] {
  cursor: default;
}

/*
    Address `[hidden]` styling not present in IE 8/9/10. (N)
*/
[hidden] {
  display: none;
}

/*
    Specify the style of visually hidden yet accessible elements. (S)
*/
[hidden="false"][aria-hidden="false"] {
  clip: rect(0 0 0 0);
  position: absolute;
  display: inline;
  /*border: 0;
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    width: 1px;*/
}

a[hidden="false"][aria-hidden="false"]:focus,
a[hidden="false"][aria-hidden="false"]:active {
  clip: auto;
  position: static;
  /*height: auto;
        margin: 0;
        overflow: visible;
        width: auto;*/
}

/*
    Elements with tabindex="-1" are NOT user focussable, but CAN be focussed via JS.
    In this case elements focussed in such a way should not receive focus styles to avoid confusion.
    (https://inclusive-components.design/a-todo-list#focusmanagement)
*/
[tabindex="-1"] {
  outline: none;
}

/*
    A blanket attempt to respect prefers-reduced-motion.
    (https://dev.to/alvaromontoro/consider-reducing-motions-1a13)
*/
@media (prefers-reduced-motion: reduce) {
  * {
    animation: none !important;
    transition: none !important;
  }
}

/*! Start-CSS Experimental. See SCSS file for documentation. */
/*-------------------------------------------------------------------------------------------------|

    EXPERIMENTAL
    ============================================================================================

|-------------------------------------------------------------------------------------------------*/
/*
    These may be experimental, but they actually make Safari usable with a keyboard, so long as
    you enable an "Accessibility" setting located in the advanced tab of Safari preferences.
    ("Press TAB to highlight each item on a web page.)
    That is - the default outline focus style works, but shadows don't unless appearance: none
    is used.
    
    1. Safari 9.1 doesn't recognize 'auto' but I suspect others won't recognize 'initial', so
       keeping both for now.
*/
/*! Start CSS Classes. See SCSS file for documentation. */
/*------------------------------------------------------------------------------------------------*\

    Classes

\*------------------------------------------------------------------------------------------------*/
/*
    Resources:
    *
*/
/*
        "Buttons" or "CTAs" that are really links should be distinguished from real buttons, so by
        default we're swapping the foreground and background colors:
    */
a[href].button,
a[href].cta {
  display: inline-block;
  /* AK. IE9 needs this. Hmmm, for what exactly?*/
  min-height: 3rem;
  overflow: visible;
  /* S: Internet Explorer 11-, N: Show the overflow in Edge, Firefox, and IE. */
  margin: 0.3rem 0;
  padding-top: 0.3rem;
  padding-top: -moz-calc(0);
  padding-top: calc(0.3rem - 1px);
  padding-right: 0.6rem;
  padding-bottom: 0.3rem;
  padding-bottom: -moz-calc(0);
  padding-bottom: calc(0.3rem - 1px);
  padding-left: 0.6rem;
  border-color: #247BA0;
  border-style: solid;
  border-width: 1px;
  border-radius: 3px;
  color: #247BA0;
  background-color: #fff;
  font-weight: inherit;
  font-style: inherit;
  font-size: inherit;
  font-family: inherit;
  line-height: 2.4rem;
  vertical-align: middle;
  text-transform: none;
  /* [N0], N: Remove the inheritance of text transform in Edge, Firefox, and IE. */
  cursor: pointer;
  -ms-touch-action: manipulation;
  /* 1 (IE10) */
  touch-action: manipulation;
  /* 1 */
  -webkit-appearance: none;
  /*@if $s__button-focus-outline-width != false {
        &:hover,
        &:active,
        &:focus {
            outline-width: $s__button-focus-outline-width;
            outline-style: $s__button-focus-outline-style;
            outline-color: $s__button-focus-outline-color;
            outline-offset: $s__button-focus-outline-offset;
        }
    }*/
}

a[href].button:hover, a[href].button:active,
a[href].cta:hover,
a[href].cta:active {
  background-color: white;
}

a[href].button:focus,
a[href].cta:focus {
  outline: 0;
  box-shadow: 0 0 0 3px rgba(255, 255, 255, 0.5);
}

a[href].button:hover, a[href].button:active, a[href].button:focus,
a[href].cta:hover,
a[href].cta:active,
a[href].cta:focus {
  background-color: #e4f3f9;
}

a[href].button--has-icon,
a[href].cta--has-icon {
  position: relative;
}

a[href].button--has-icon::after,
a[href].cta--has-icon::after {
  content: "";
  display: inline;
  padding-left: 1.25em;
  line-height: 0;
}

a[href].button--has-icon .icon,
a[href].cta--has-icon .icon {
  position: absolute;
  bottom: 0;
  transform: translateY(-15%);
}

.button[data-text][aria-hidden="true"] {
  display: inline-block;
  /* AK. IE9 needs this. Hmmm, for what exactly?*/
  min-height: 3rem;
  overflow: visible;
  /* S: Internet Explorer 11-, N: Show the overflow in Edge, Firefox, and IE. */
  margin: 0.3rem 0;
  padding-top: 0.3rem;
  padding-top: -moz-calc(0);
  padding-top: calc(0.3rem - 1px);
  padding-right: 0.6rem;
  padding-bottom: 0.3rem;
  padding-bottom: -moz-calc(0);
  padding-bottom: calc(0.3rem - 1px);
  padding-left: 0.6rem;
  border-color: rgba(0, 0, 0, 0.2);
  border-style: solid;
  border-width: 1px;
  border-radius: 3px;
  color: #fff;
  background-color: #247BA0;
  font-weight: inherit;
  font-style: inherit;
  font-size: inherit;
  font-family: inherit;
  line-height: 2.4rem;
  vertical-align: middle;
  text-transform: none;
  /* [N0], N: Remove the inheritance of text transform in Edge, Firefox, and IE. */
  cursor: pointer;
  -ms-touch-action: manipulation;
  /* 1 (IE10) */
  touch-action: manipulation;
  /* 1 */
  -webkit-appearance: none;
  /*@if $s__button-focus-outline-width != false {
        &:hover,
        &:active,
        &:focus {
            outline-width: $s__button-focus-outline-width;
            outline-style: $s__button-focus-outline-style;
            outline-color: $s__button-focus-outline-color;
            outline-offset: $s__button-focus-outline-offset;
        }
    }*/
}

.button[data-text][aria-hidden="true"]:hover, .button[data-text][aria-hidden="true"]:active {
  background-color: #1b5b76;
}

.button[data-text][aria-hidden="true"]:focus {
  outline: 0;
  box-shadow: 0 0 0 3px rgba(36, 123, 160, 0.5);
}

.button[data-text][aria-hidden="true"]::before {
  content: attr(data-text);
}

.bordered {
  border-width: 6px;
  border-style: solid;
  border-color: #247BA0;
  padding-top: 24px;
  padding-top: calc(24px - 6px);
  padding-left: 24px;
  padding-left: calc(24px - 6px);
  padding-right: 24px;
  padding-right: calc(24px - 6px);
  padding-bottom: 0;
}

.bordered::after {
  display: block;
  content: "";
  height: 1px;
  margin-top: 24px;
  margin-bottom: -1px;
  margin-bottom: calc(-1px - 6px);
}

.padded {
  border-width: 0px;
  border-style: solid;
  border-color: #247BA0;
  padding-top: 2.4rem;
  padding-top: calc(2.4rem - 0px);
  padding-left: 2.4rem;
  padding-left: calc(2.4rem - 0px);
  padding-right: 2.4rem;
  padding-right: calc(2.4rem - 0px);
  padding-bottom: 0;
}

.padded::after {
  display: block;
  content: "";
  height: 1px;
  margin-top: 2.4rem;
  margin-bottom: -1px;
  margin-bottom: calc(-1px - 0px);
}

/*
        1. Prevent element increasing height of parent.
    */
b.subtitle {
  font-size: 0.8em;
  font-weight: inherit;
  font-style: normal;
  line-height: 1;
  /* 1 */
}

/*
        1. Negate heading margin.
    */
p.subtitle {
  font-size: 1.5em;
  font-weight: inherit;
  margin-top: -1.2rem;
  /* 1 */
}

/*
        1. Negate heading margin.
    */
.tagline {
  font-size: 1.14285714286em;
  margin-top: -1.2rem;
  /* 1 */
}

/*
        1. Collapse whitespace.
        2. Prevent extra height being added.
    */
.composite {
  display: -webkit-inline-box;
  /* 1 */
  display: -ms-inline-flexbox;
  /* 1 */
  display: inline-flex;
  /* 1 */
  vertical-align: middle;
  /* 2 */
  max-width: 100%;
  -webkit-flex-wrap: wrap;
  -ms-flex-wrap: wrap;
  flex-wrap: wrap;
}

/*
        1. Prevent extra height being added.
    */
.composite > * {
  vertical-align: top;
  /* 1 */
  -webkit-flex: 0 1 auto;
  -ms-flex: 0 1 auto;
  flex: 0 1 auto;
}

/*
        IE9

        1. Make sure there are no spaces between elements in the markup as the as the white space won't
           collapse.

        2. Hide button.
    */
@media screen and (min-width: 0\0) and (min-resolution: 0.001dpcm) {
  .composite {
    display: inline-block;
    /* 1 */
    white-space: nowrap;
    /* 1 */
    overflow: hidden;
    /* 2 */
  }
  .composite > * {
    vertical-align: top;
    display: inline-block;
  }
}

.composite > *:not(:first-child) {
  border-top-left-radius: 0 !important;
  border-bottom-left-radius: 0 !important;
}

.composite > *:not(:last-child) {
  border-top-right-radius: 0 !important;
  border-bottom-right-radius: 0 !important;
  border-right: 0 !important;
}

/* CUSTOM INPUTS: RADIOS AND CHECKBOXES */
/* Hide the real inputs: */
/* (note this method is important to persist accessibility and keyboard navigation) */
.custom-input[type="checkbox"],
.custom-input[type="radio"] {
  position: absolute;
  opacity: 0;
}

/* Prepare for positioning the pseudo-elements: */
.custom-input-label {
  position: relative;
  vertical-align: top;
  /*display: -webkit-inline-flex;
        display: -ms-inline-flexbox;
        display: inline-flex;
        -webkit-align-items: center;
             -ms-flex-align: center;
               align-items: center;*/
  padding-left: 1.5em;
}

.custom-input:focus + .custom-input-label::before {
  box-shadow: 0 0 0 2px #52b0d8;
  outline: 0;
}

/* Common psuedo-element styles: */
.custom-input[type="checkbox"] + .custom-input-label::before,
.custom-input[type="radio"] + .custom-input-label::before {
  display: inline-block;
  content: "";
  width: 1em;
  height: 1em;
  background: #ccc;
  border-radius: 2px;
  position: absolute;
  left: 0;
  top: 50%;
  -webkit-transform: translate(0px, -53%);
  -ms-transform: translate(0px, -53%);
  transform: translate(0px, -53%);
}

/* Make the radio elements circular: */
.custom-input[type="radio"] + .custom-input-label::before {
  border-radius: 50%;
}

/* Define the checkbox :checked state: */
.custom-input[type="checkbox"]:checked + .custom-input-label::before {
  background: #247BA0;
}

/* Define the checkbox 'tick': */
.custom-input[type="checkbox"]:checked + .custom-input-label::after {
  content: "";
  display: inline-block;
  width: 0.6em;
  height: 0.3em;
  border: solid #fff;
  border-width: 0 0 0.2em 0.2em;
  position: absolute;
  left: 0.22em;
  top: 50%;
  -webkit-transform: translate(0px, -80%) rotate(-50deg);
  -ms-transform: translate(0px, -80%) rotate(-50deg);
  transform: translate(0px, -80%) rotate(-50deg);
}

/* Define the radio 'dot': */
.custom-input[type="radio"]:checked + .custom-input-label::before {
  background: #fff;
  border-color: #247BA0;
  border-width: 0.25em;
  border-style: solid;
}

/* Adjustments for end (right) alignment: */
.custom-input--align-end[type="checkbox"] + .custom-input-label,
.custom-input--align-end[type="radio"] + .custom-input-label {
  padding-left: 0;
  padding-right: 1.5em;
}

.custom-input--align-end[type="checkbox"] + .custom-input-label::before,
.custom-input--align-end[type="radio"] + .custom-input-label::before {
  left: auto;
  right: 0;
}

.custom-input--align-end[type="checkbox"]:checked + .custom-input-label::after {
  left: auto;
  right: 0.16em;
}

/* CUSTOM INPUTS: FILE */
/* -webkit hide the button: */
.custom-input[type="file"]::-webkit-file-upload-button {
  border: 0;
  padding: 0;
  margin: 0;
  width: 0;
  background: transparent;
}

/* Firefox hide the button: */
@supports (-moz-appearance: meterbar) {
  .custom-input[type=file] {
    text-indent: -5.6em;
    padding-right: 0.375rem;
  }
}

/* IE10-11, Edge hide the button: */
.custom-input[type=file]::-ms-browse {
  padding: 0;
  margin: -1px;
  width: 0;
  border: 0;
  background: transparent;
}

/* IE9 hide the button: (https://jeffclayton.wordpress.com/2014/07/22/internet-explorer-css-hacks-collection/) */
@media screen and (min-width: 0\0) and (min-resolution: 0.001dpcm) {
  /*
                So far I haven't managed to get this arrangement working properly in IE9, so hiding it:
            */
  .button + .custom-input[type=file] {
    margin-left: -5.35em;
  }
  .custom-input[type="file"] + .button {
    min-width: 7em;
    margin-left: -7em;
    text-align: center;
  }
}

.poem {
  font-family: cursive;
  background: #fff;
  overflow: auto;
  margin-top: 0;
  margin-bottom: 2.4rem;
}
